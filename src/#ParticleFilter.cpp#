#include <ParticleFilter.hpp>
#include <TrackerManager.hpp>

using namespace pcl;
using namespace std;

ParticleFilter::ParticleFilter(std::string filename, std::string d_id)
{
  target_cloud.reset(new PointCloud<PointXYZRGBA>());
  if(io::loadPCDFile (filename, *target_cloud) == -1)
    {
      std::cout << "pcd file not found" << std::endl;
    }
  device_id = d_id;
  counter = 0;
  new_cloud_ = false;

  downsampling_grid_size_ =  0.002;

  std::vector<double> default_step_covariance = std::vector<double> (6, 0.015 * 0.015);
  default_step_covariance[3] *= 40.0;
  default_step_covariance[4] *= 40.0;
  default_step_covariance[5] *= 40.0;

  std::vector<double> initial_noise_covariance = std::vector<double> (6, 0.00001);
  std::vector<double> default_initial_mean = std::vector<double> (6, 0.0);

  boost::shared_ptr<tracking::KLDAdaptiveParticleFilterOMPTracker<PointXYZRGBA, tracking::ParticleXYZRPY> > tracker
    (new tracking::KLDAdaptiveParticleFilterOMPTracker<PointXYZRGBA, tracking::ParticleXYZRPY> (8));

  tracking::ParticleXYZRPY bin_size;
  bin_size.x = 0.1f;
  bin_size.y = 0.1f;
  bin_size.z = 0.1f;
  bin_size.roll = 0.1f;
  bin_size.pitch = 0.1f;
  bin_size.yaw = 0.1f;


  //Set all parameters for  KLDAdaptiveParticleFilterOMPTracker
  tracker->setMaximumParticleNum (1000);
  tracker->setDelta (0.99);
  tracker->setEpsilon (0.2);
  tracker->setBinSize (bin_size);

  //Set all parameters for  ParticleFilter
  tracker_ = tracker;
  tracker_->setTrans (Eigen::Affine3f::Identity ());
  tracker_->setStepNoiseCovariance (default_step_covariance);
  tracker_->setInitialNoiseCovariance (initial_noise_covariance);
  tracker_->setInitialNoiseMean (default_initial_mean);
  tracker_->setIterationNum (1);
  tracker_->setParticleNum (100);
  tracker_->setResampleLikelihoodThr(0.00);
  tracker_->setUseNormal (false);

  //Setup coherence object for tracking
  tracking::ApproxNearestPairPointCloudCoherence<PointXYZRGBA>::Ptr coherence = tracking::ApproxNearestPairPointCloudCoherence<PointXYZRGBA>::Ptr
    (new tracking::ApproxNearestPairPointCloudCoherence<PointXYZRGBA> ());
    
  boost::shared_ptr<tracking::DistanceCoherence<PointXYZRGBA> > distance_coherence
    = boost::shared_ptr<tracking::DistanceCoherence<PointXYZRGBA> > (new tracking::DistanceCoherence<PointXYZRGBA> ());
  coherence->addPointCoherence (distance_coherence);

  boost::shared_ptr<search::Octree<PointXYZRGBA> > search (new search::Octree<PointXYZRGBA> (0.01));
  coherence->setSearchMethod (search);
  coherence->setMaximumDistance (0.01);

  tracker_->setCloudCoherence (coherence);

 

}

PointCloud<PointXYZRGBA>::Ptr
ParticleFilter::Execute(const PointCloud<PointXYZRGBA>::Ptr &cloud_in)
{
  //std::cout << cloud_in->points.size();
  cloud_pass_.reset (new PointCloud<PointXYZRGBA>);
  cloud_pass_downsampled_.reset (new PointCloud<PointXYZRGBA>);
  FilterPassThrough (cloud_in, *cloud_pass_);
  GridSampleApprox (cloud_pass_, *cloud_pass_downsampled_, downsampling_grid_size_);

  if(counter < 10)
  {
	counter++;
  }
  else if(!cloud_pass_downsampled_->empty())
  {
    //Track the object
    //std::cout << cloud_pass_downsampled_->points.size() + "\n";
    tracker_->setInputCloud (cloud_pass_downsampled_);
    //tracker_->setInputCloud (cloud_in);
    tracker_->compute ();
    new_cloud_ = true;
  }
  DrawParticles();
  ReturnCloud = cloud_pass_downsampled_;
  return ReturnCloud;
}

void ParticleFilter::GridSampleApprox(const PointCloud<PointXYZRGBA>::ConstPtr &cloud, PointCloud<PointXYZRGBA> &result, double leaf_size)
{
  ApproximateVoxelGrid<PointXYZRGBA> grid;
  grid.setLeafSize (static_cast<float> (leaf_size), static_cast<float> (leaf_size), static_cast<float> (leaf_size));
  grid.setInputCloud (cloud);
  grid.filter (result);
}

void ParticleFilter::FilterPassThrough(const PointCloud<PointXYZRGBA>::Ptr &cloud, PointCloud<PointXYZRGBA> &result)
{
  PassThrough<PointXYZRGBA> pass;
  pass.setFilterFieldName ("z");
  pass.setFilterLimits (0.0, TrackerManager::GlobalTracker()->GetZDepth());
  pass.setKeepOrganized (false);
  pass.setInputCloud (cloud);
  pass.filter (result);
}

bool ParticleFilter::DrawParticles()
{
  tracking::ParticleXYZRPY result = tracker_->getResult ();
  Eigen::Affine3f transformation = tracker_->toEigenMatrix (result);

  //move close to camera a little for better visualization
  transformation.translation () += Eigen::Vector3f (0.0f, 0.0f, -0.005f);
  PointCloud<PointXYZRGBA>::Ptr result_cloud (new PointCloud<PointXYZRGBA>);
  pcl::transformPointCloud<PointXYZRGBA> (*(tracker_->getReferenceCloud ()), *result_cloud, transformation);

  //Draw blue model reference point cloud
    pcl::visualization::PointCloudColorHandlerCustom<PointXYZRGBA> blue_color (result_cloud, 0, 255, 255);
boost::shared_ptr<visualization::PCLVisualizer> visualizer = 
    TrackerManager::GlobalTracker()->GetVisualizer();
 std::string name = "pringles curley mustache";
  if (!visualizer->updatePointCloud (result_cloud, blue_color, name))
    {
      visualizer->addPointCloud (result_cloud, blue_color, name);
      visualizer->setPointCloudRenderingProperties
	(visualization::PCL_VISUALIZER_POINT_SIZE, 1, name);
    }
}

Eigen::Affine3f ParticleFilter::ComputeTransform()
{
  return Eigen::Affine3f::Identity ();
}

void ParticleFilter::PrintAlgorithm()
{
  
}

void setModel()
{

}