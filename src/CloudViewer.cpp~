#include <CloudViewer.hpp>

using namespace pcl;

CloudViewer::CloudViewer()
{

}

PointCloud<PointXYZRGBA>::Ptr
CloudViewer::Execute(const PointCloud<PointXYZRGBA>::Ptr &cloud_in)
{
  ReturnCloud = cloud_in;
  return ReturnCloud;
}

void KDTracker::RGBToHSV(float r, float g, float b, float *h, float *s, float *v)
{
	float max = r;
	if (max < g) max = g;
	if (max < b) max = b;
	float min = r;
	if (min > g) min = g;
	if (min > b) min = b;
	
	/*
	 *	Calculate h
	 */
	
	*h = 0;
	if (max == min) h = 0;
	else if (max == r) {
		*h = 60 * (g - b)/(max - min);
		if (*h < 0) *h += 360;
		if (*h >= 360) *h -= 360;
	} else if (max == g) {
		*h = 60 * (b - r) / (max - min) + 120;
	} else if (max == b) {
		*h = 60 * (r - g) / (max - min) + 240;
	}

	if (max == 0) *s = 0;
	else *s = 1 - (min / max);

	*v = max;
}

Eigen::Affine3f CloudViewer::ComputeTransform()
{
  return Eigen::Affine3f::Identity ();
}

void CloudViewer::PrintAlgorithm()
{
  
}
